type Query {
  authorship: String!
  currentElected: [Account!]!
  sessionValidators: [Validator!]!
  stakingValidators: [Validator!]!
  phragmenValidators: PhragmenValidators!
  validatorCount: Int!
  stakers(accountId: String!): ValidationSet
  nominators(accountId: String!): String
  recievedHeartbeats(sessionIndex: String!, validatorId: String!): String
  currentIndex: String
  bonded(controllerId: String!): String
  ledger(accountId: String!): Ledger
  freeBalance(accountId: String!): String
}

type Subscription {
  bestHead: String!
  sessionInfo: SessionInfo
  heartbeats: [String]
}

type Validator {
  controllerId: String
  freeBalance: String
  totalBonded: String
  activeBonded: String
  commision: String
  accountId: String
  unstakeThreshold: Int
  validatorPayment: String 
}

type Nominators {
  accountId: String!
  stake: String!
}

type Candidate {
  rank: Int!
  accountId: String!
  totalStake: String!
  validatorStake: String!
  nominatorStake: String!
  nominatorCount: Int!
  controllerId: String!
  nominators: [Nominators]
}

type SessionInfo {
  currentIndex: Int
  eraLength: Int
  eraProgress: Int
  sessionLength: Int
  sessionsPerEra: Int
  sessionProgress: Int
}

type Ledger {
  stash: String!
  total: String
  active: String
}
  
type Account {
  accountId: String!
  bond: String!
  freeBalance: String
}

type PhragmenValidators {
  validatorCount: Int!
  nominatorCount: Int!
  totalIssuance: String!
  valCandidates: [Candidate!]!
  lowestStake: String!
}

type ValidationSet {
  totalStake: String!
  ownStake: String!
  nominators: [Account!]!
}